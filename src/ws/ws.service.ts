// src/ws/ws.service.ts
import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import WebSocket from 'ws';

// Í≥µÌÜµ Î™®Îìà
import { ExchangeService } from '../common/exchange.service';
import { FeeCalculatorService } from '../common/fee-calculator.service';
import { TelegramService } from 'src/common/telegram.service';
import { ArbitrageDetectorService } from '../common/arbitrage-detector.service';
import { StrategyHighService } from '../common/strategy-high.service';
import { StrategyLowService } from '../common/strategy-low.service';
import { ProfitCalculatorService } from '../common/profit-calculator.service';
import { SpreadCalculatorService } from '../common/spread-calculator.service';
import { ArbitrageService } from '../common/arbitrage.service';
import { CycleProfitCalculatorService } from 'src/common/cycle-profit-calculator.service';
import { ArbitrageRecordService } from '../db/arbitrage-record.service';

@Injectable()
export class WsService implements OnModuleInit {
  private readonly logger = new Logger(WsService.name);

  private readonly watchedSymbols = [
    { symbol: 'xrp', upbit: 'KRW-XRP', binance: 'xrpusdt' },
    { symbol: 'trx', upbit: 'KRW-TRX', binance: 'trxusdt' },
    { symbol: 'doge', upbit: 'KRW-DOGE', binance: 'dogeusdt' },
    { symbol: 'sol', upbit: 'KRW-SOL', binance: 'solusdt' },
    { symbol: 'matic', upbit: 'KRW-MATIC', binance: 'maticusdt' },
    { symbol: 'algo', upbit: 'KRW-ALGO', binance: 'algousdt' },
    { symbol: 'atom', upbit: 'KRW-ATOM', binance: 'atomusdt' },
    { symbol: 'eos', upbit: 'KRW-EOS', binance: 'eosusdt' },
    { symbol: 'xlm', upbit: 'KRW-XLM', binance: 'xlmusdt' },
    { symbol: 'ada', upbit: 'KRW-ADA', binance: 'adausdt' },
    { symbol: 'dot', upbit: 'KRW-DOT', binance: 'dotusdt' },
    { symbol: 'avax', upbit: 'KRW-AVAX', binance: 'avaxusdt' },
    { symbol: 'ftm', upbit: 'KRW-FTM', binance: 'ftmusdt' },
    { symbol: 'hbar', upbit: 'KRW-HBAR', binance: 'hbarusdt' },
    { symbol: 'zil', upbit: 'KRW-ZIL', binance: 'zilusdt' },
    { symbol: 'vet', upbit: 'KRW-VET', binance: 'vetusdt' },
    { symbol: 'icx', upbit: 'KRW-ICX', binance: 'icxusdt' },
    { symbol: 'qtum', upbit: 'KRW-QTUM', binance: 'qtumusdt' },
    { symbol: 'neo', upbit: 'KRW-NEO', binance: 'neousdt' },
    { symbol: 'btt', upbit: 'KRW-BTT', binance: 'bttusdt' }, // Ï∂îÍ∞ÄÎêú Ïã¨Î≥º
  ];

  private upbitPrices = new Map<string, number>();
  private binancePrices = new Map<string, number>();

  private readonly profitThresholdPercent = 0.7; // ÏßÑÏûÖ Í∏∞Ï§Ä (ÏõêÌïòÎ©¥ ÏÑ§Ï†ï Í∞ÄÎä•)
  private readonly highThreshold = 0.7; // ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÉÅÏúÑ Ï°∞Í±¥ (%)
  private readonly lowThreshold = -0.1; // ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌïòÏúÑ Ï°∞Í±¥ (%)

  constructor(
    private readonly exchangeService: ExchangeService,
    private readonly feeCalculatorService: FeeCalculatorService,
    private readonly telegramService: TelegramService,
    private readonly strategyHighService: StrategyHighService,
    private readonly strategyLowService: StrategyLowService,
    private readonly profitCalculatorService: ProfitCalculatorService,
    private readonly arbitrageDetectorService: ArbitrageDetectorService,
    private readonly spreadCalculatorService: SpreadCalculatorService,
    private readonly arbitrageService: ArbitrageService,
    private readonly cycleProfitCalculatorService: CycleProfitCalculatorService,
    private readonly arbitrageRecordService: ArbitrageRecordService,
  ) {}

  onModuleInit() {
    for (const { symbol, upbit, binance } of this.watchedSymbols) {
      this.connectToUpbit(symbol, upbit);
      this.connectToBinance(symbol, binance);
    }
  }

  // handleHighPremiumFlowÎäî ArbitrageDetectorServiceÏùò ÏΩúÎ∞±ÏúºÎ°úÎßå ÏÇ¨Ïö©
  private handleHighPremiumFlow = async (symbol: string) => {
    // cycleId Ïù∏Ïûê Ï†úÍ±∞
    this.logger.log(
      `[DETECTOR] Í≥†ÌîÑÎ¶¨ÎØ∏ÏóÑ (${symbol.toUpperCase()}) Í∞êÏßÄÎê®. triggerArbitrage ÎåÄÍ∏∞Ï§ë.`,
    );
  };

  // handleLowPremiumFlowÎäî ArbitrageDetectorServiceÏùò ÏΩúÎ∞±ÏúºÎ°úÎßå ÏÇ¨Ïö©
  private handleLowPremiumFlow = async (symbol: string) => {
    // cycleId Ïù∏Ïûê Ï†úÍ±∞
    this.logger.log(
      `[DETECTOR] Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ (${symbol.toUpperCase()}) Í∞êÏßÄÎê®. Îã§Ïùå ÌîåÎ°úÏö∞ ÏßÑÌñâ ÎåÄÍ∏∞Ï§ë.`,
    );
  };

  private evaluate = async () => {
    const rate = await this.exchangeService.getUSDTtoKRW();
    await this.arbitrageDetectorService.evaluateArbitrageTargets(
      this.watchedSymbols,
      this.upbitPrices,
      this.binancePrices,
      rate,
      this.highThreshold,
      this.lowThreshold,
      this.handleHighPremiumFlow,
      this.handleLowPremiumFlow,
      this.logger,
    );
  };

  private async triggerArbitrage(data: {
    symbol: string;
    upbitPrice: number;
    binancePrice: number;
    rate: number;
    netProfit: number;
    netProfitPercent: number;
  }) {
    const totalKRWCapital = 20_000_000;
    const rate = await this.exchangeService.getUSDTtoKRW();
    const initialInvestmentUSDT = totalKRWCapital / 2 / rate;

    const cycleProfitResult =
      await this.cycleProfitCalculatorService.calculateOverallCycleProfit(
        data.symbol,
        data.upbitPrice,
        data.binancePrice,
        initialInvestmentUSDT,
        this.watchedSymbols,
        this.upbitPrices,
        this.binancePrices,
      );

    if (cycleProfitResult.isProfitable) {
      this.logger.warn(
        `‚ú® [CYCLE ARBITRAGE] Ï¥ù ÏòàÏÉÅ ÏàòÏùµÎ•† ${cycleProfitResult.totalNetProfitPercent.toFixed(2)}% -> Ï∞®ÏùµÍ±∞Îûò ÏÇ¨Ïù¥ÌÅ¥ Ï°∞Í±¥ ÎßåÏ°±!`,
      );

      // --- 1. ÏÉàÎ°úÏö¥ Í±∞Îûò ÏÇ¨Ïù¥ÌÅ¥ ÏãúÏûë Î∞è DB Ï†ÄÏû• (Í≥†ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏãúÏûë) ---
      const newCycle = await this.arbitrageRecordService.createArbitrageCycle({
        startTime: new Date(),
        initialInvestmentUsd: initialInvestmentUSDT,
        initialInvestmentKrw: initialInvestmentUSDT * rate,
        highPremiumSymbol: data.symbol,
        highPremiumBinanceBuyPriceUsd: data.binancePrice,
        highPremiumInitialRate: data.rate,
        highPremiumBuyAmount: initialInvestmentUSDT / data.binancePrice,
        highPremiumSpreadPercent:
          ((data.upbitPrice - data.binancePrice * data.rate) /
            (data.binancePrice * data.rate)) *
          100,
        highPremiumShortEntryFeeKrw: 0, // Ï¥àÍ∏∞ Í∏∞Î°ùÏù¥ÎØÄÎ°ú 0ÏúºÎ°ú ÏÑ§Ï†ï, Ïã§Ï†ú Í∞íÏùÄ StrategyHighServiceÏóêÏÑú ÏóÖÎç∞Ïù¥Ìä∏
        status: 'IN_PROGRESS',
      });
      this.logger.log(
        `üöÄ [SIMULATE] ÏÉàÎ°úÏö¥ Ï∞®ÏùµÍ±∞Îûò ÏÇ¨Ïù¥ÌÅ¥ ${newCycle.id} ÏãúÏûëÎê®.`,
      );

      // --- 2. Í≥†ÌîÑÎ¶¨ÎØ∏ÏóÑ Îß§Îß§ ÏãúÎÆ¨Î†àÏù¥ÏÖò Î∞è DB ÏóÖÎç∞Ïù¥Ìä∏ (ÏÜ°Í∏àÏãúÍ∞Ñ 30Ï¥à Í∞ÄÏ†ï) ---
      this.logger.log(
        `‚û°Ô∏è [SIMULATE] Í≥†ÌîÑÎ¶¨ÎØ∏ÏóÑ ${data.symbol.toUpperCase()} Îß§Ïàò Î∞è ÏÜ°Í∏à ÏãúÏûë (30Ï¥à ÎåÄÍ∏∞)`,
      );
      await new Promise((resolve) => setTimeout(resolve, 30 * 1000));

      await this.arbitrageService.simulateArbitrage(data, newCycle.id); // <-- Ïó¨Í∏∞ÏóêÏÑú Ìò∏Ï∂ú

      this.logger.log(
        `‚úÖ [SIMULATE] Í≥†ÌîÑÎ¶¨ÎØ∏ÏóÑ ${data.symbol.toUpperCase()} Îß§Îß§/ÏÜ°Í∏à ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏôÑÎ£å. DB ÏóÖÎç∞Ïù¥Ìä∏Îê®.`,
      );

      // --- 3. Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ ÏΩîÏù∏ ÌÉêÏÉâ Î∞è Îß§Îß§ ÏãúÎÆ¨Î†àÏù¥ÏÖò (ÌòÑÏû¨ cycleIdÎ°ú Í≥ÑÏÜç ÏßÑÌñâ) ---
      if (cycleProfitResult.recommendedLowPremiumSymbol) {
        const lowSymbol = cycleProfitResult.recommendedLowPremiumSymbol;
        const upbitPriceLow = this.upbitPrices.get(lowSymbol);
        const binancePriceLow = this.binancePrices.get(lowSymbol);

        if (upbitPriceLow && binancePriceLow) {
          this.logger.log(
            `‚¨ÖÔ∏è [SIMULATE] Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ ${lowSymbol.toUpperCase()} Îß§Ïàò Î∞è ÏÜ°Í∏à ÏãúÏûë (30Ï¥à ÎåÄÍ∏∞)`,
          );
          await new Promise((resolve) => setTimeout(resolve, 30 * 1000));

          await this.strategyLowService.handleLowPremiumFlow(
            lowSymbol,
            upbitPriceLow,
            binancePriceLow,
            rate,
            newCycle.id,
          );
          this.logger.log(
            `‚úÖ [SIMULATE] Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ ${lowSymbol.toUpperCase()} Îß§Îß§/ÏÜ°Í∏à ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏôÑÎ£å. DB ÏóÖÎç∞Ïù¥Ìä∏Îê®.`,
          );
        } else {
          this.logger.warn(
            `‚ö†Ô∏è [SIMULATE] Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ ${lowSymbol.toUpperCase()} Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±ÏúºÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖò Í±¥ÎÑàÎúÄ.`,
          );
        }
      } else {
        this.logger.warn(
          `‚ö†Ô∏è [SIMULATE] Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ ÏΩîÏù∏ ÌÉêÏÉâ Ïã§Ìå®. Ï†ÑÏ≤¥ ÌîåÎ°úÏö∞ ÏôÑÎ£åÎêòÏßÄ ÏïäÏùå.`,
        );
        await this.arbitrageRecordService.updateArbitrageCycle(newCycle.id, {
          status: 'FAILED',
          errorDetails: 'Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ ÏΩîÏù∏ ÌÉêÏÉâ Ïã§Ìå®Î°ú ÌîåÎ°úÏö∞ ÎØ∏ÏôÑÎ£å',
          endTime: new Date(),
        });
      }

      // --- ÌÖîÎ†àÍ∑∏Îû® ÏïåÎ¶º Í∞ïÌôî (Ï£ºÏÑù Ìï¥Ï†ú Ïãú ÏÇ¨Ïö©) ---
      await this.telegramService.sendMessage(
        `‚úÖ *[ÏãúÎÆ¨Î†àÏù¥ÏÖò] Ï∞®ÏùµÍ±∞Îûò ÏÇ¨Ïù¥ÌÅ¥ ÏôÑÎ£å!*
` +
          `Ï¥ù ÏàòÏùµÎ•†: ${cycleProfitResult.totalNetProfitPercent.toFixed(2)}%
` +
          `Ï¥ù ÏàúÏù¥Ïùµ: ${cycleProfitResult.totalNetProfitKRW.toFixed(0)}‚Ç© (${cycleProfitResult.totalNetProfitUsd.toFixed(2)}$)
` +
          `Í≥†ÌîÑÎ¶¨ÎØ∏ÏóÑ: ${data.symbol.toUpperCase()} (ÏàòÏùµ ${data.netProfit.toFixed(0)}‚Ç©)
` +
          `Ï†ÄÌîÑÎ¶¨ÎØ∏ÏóÑ: ${cycleProfitResult.recommendedLowPremiumSymbol?.toUpperCase() || 'N/A'} (ÏàòÏùµ ${cycleProfitResult.netProfitLowPremiumKRW.toFixed(0)}‚Ç©)`,
      );
    } else {
      this.logger.log(
        `‚ö†Ô∏è [CYCLE ARBITRAGE] Ï¥ù ÏòàÏÉÅ ÏàòÏùµÎ•† ${cycleProfitResult.totalNetProfitPercent.toFixed(2)}% -> Ï°∞Í±¥ Î∂àÎßåÏ°±. (Î™©Ìëú ${this.cycleProfitCalculatorService.TARGET_CYCLE_PROFIT_PERCENT}%)`,
      );
    }
  }

  private trySpreadCalc = async (symbol: string) => {
    const upbitPrice = this.upbitPrices.get(symbol);
    const binancePrice = this.binancePrices.get(symbol);

    if (upbitPrice === undefined || binancePrice === undefined) {
      return;
    }

    await this.spreadCalculatorService.calculateSpread({
      symbol,
      upbitPrice,
      binancePrice,
      profitThresholdPercent: this.profitThresholdPercent,
      onArbitrageConditionMet: this.triggerArbitrage.bind(this),
    });
  };

  private connectToUpbit(symbol: string, market: string) {
    const socket = new WebSocket('wss://api.upbit.com/websocket/v1');

    socket.on('open', () => {
      this.logger.log(`üü¢ [Upbit] Connected for ${market}`);
      const payload = [
        { ticket: `kimP-${symbol}` },
        { type: 'ticker', codes: [market] },
      ];
      socket.send(JSON.stringify(payload));
    });

    socket.on('message', (data) => {
      const json = JSON.parse(data.toString('utf8'));
      const price = json.trade_price;
      this.upbitPrices.set(symbol, price);
      this.trySpreadCalc(symbol);
    });

    socket.on('close', () => {
      this.logger.warn(`üîÅ [Upbit] Reconnecting for ${market}...`);
      setTimeout(() => this.connectToUpbit(symbol, market), 1000);
    });

    socket.on('error', (err) => {
      this.logger.error(`üî• [Upbit] ${market} WebSocket Error: ${err.message}`);
    });
  }

  private connectToBinance(symbol: string, stream: string) {
    const socket = new WebSocket(
      `wss://stream.binance.com:9443/ws/${stream}@ticker`,
    );

    socket.on('open', () => {
      this.logger.log(`üü¢ [Binance] Connected for ${stream}`);
    });

    socket.on('message', (data) => {
      try {
        const raw = data.toString();
        const json = JSON.parse(raw);
        const price = parseFloat(json?.c);

        if (!price || isNaN(price)) {
          this.logger.warn(`‚ö†Ô∏è [Binance ${symbol}] price invalid:`, json);
          return;
        }

        this.binancePrices.set(symbol, price);
        this.trySpreadCalc(symbol);
      } catch (e) {
        this.logger.error(`‚ùå [Binance ${symbol}] message parse error: ${e}`);
      }
    });

    socket.on('close', () => {
      this.logger.warn(`üîÅ [Binance] Reconnecting for ${stream}...`);
      setTimeout(() => this.connectToBinance(symbol, stream), 1000);
    });

    socket.on('error', (err) => {
      this.logger.error(
        `üî• [Binance] ${stream} WebSocket Error: ${err.message}`,
      );
    });
  }
}
